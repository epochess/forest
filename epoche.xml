<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="default.xsl"?>
<fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="true"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>285</fr:anchor><fr:addr
type="user">epoche</fr:addr><fr:route>epoche.xml</fr:route><fr:title
text="Epoche">Epoche</fr:title><fr:taxon>Person</fr:taxon><fr:authors /><fr:meta
name="institution">Zhengzhou University of Light Industry</fr:meta><fr:meta
name="position">Bachelor Student</fr:meta><fr:meta
name="external">https://github.com/epochess</fr:meta></fr:frontmatter><fr:mainmatter><fr:p>My name is 苏爽, but I go by the name <fr:em>Epoche</fr:em> online. I’m interested in Computer Science.</fr:p></fr:mainmatter><fr:backmatter><fr:tree
toc="false"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:title
text="Backlinks">Backlinks</fr:title><fr:authors /></fr:frontmatter><fr:mainmatter><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="true"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>286</fr:anchor><fr:addr
type="user">epoche-0001</fr:addr><fr:route>index.xml</fr:route><fr:title
text="Epoche’s forest">Epoche’s forest</fr:title><fr:date><fr:year>2024</fr:year><fr:month>9</fr:month><fr:day>16</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="epoche.xml"
addr="epoche"
title="Epoche">Epoche</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>This is my forest, which is <fr:link
type="external"
href="https://www.jonmsterling.com/jms-005P.xml">a way of organizing notes</fr:link>. Here is <fr:link
type="external"
href="https://www.jonmsterling.com/jms-009H.xml">a list of other websites organized as forests</fr:link>. Some of the contents here:</fr:p><fr:ul><fr:li><fr:link
type="local"
href="sponge-0001.xml"
addr="sponge-0001"
title="Sponge Lab Notes">Sponge Lab Notes</fr:link></fr:li>
  <fr:li><fr:link
type="local"
href="ocmst-0001.xml"
addr="ocmst-0001"
title="Functional Red-Black Tree Implementation">Functional Red-Black Tree Implementation</fr:link></fr:li></fr:ul><fr:p>You can also visit my <fr:link
type="local"
href="epoche.xml"
addr="epoche"
title="Epoche">contributor page</fr:link> to see a list of my trees.</fr:p><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>261</fr:anchor><fr:addr
type="user">epoche-0002</fr:addr><fr:route>epoche-0002.xml</fr:route><fr:title
text="Learning progress on evergreen notes in forester">Learning progress on evergreen notes in forester</fr:title><fr:date><fr:year>2024</fr:year><fr:month>9</fr:month><fr:day>16</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="epoche.xml"
addr="epoche"
title="Epoche">Epoche</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p><fr:ul><fr:li><fr:link
type="external"
href="http://www.jonmsterling.com/jms-007N.xml">Overview of the Forester markup language</fr:link></fr:li>
    <fr:li><fr:link
type="external"
href="http://www.jonmsterling.com/jms-007H.xml">Creating new trees</fr:link></fr:li>
    <fr:li><fr:link
type="external"
href="http://www.jonmsterling.com/jms-007K.xml">Creating your personal biographical tree</fr:link></fr:li></fr:ul></fr:p></fr:mainmatter><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="false"
numbered="false"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:title
text="Contributions">Contributions</fr:title><fr:authors /></fr:frontmatter><fr:mainmatter><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>288</fr:anchor><fr:addr
type="user">ocmst-0004</fr:addr><fr:route>ocmst-0004.xml</fr:route><fr:title
text="Insertion (Okaskaki's algorithm)">Insertion (Okaskaki's algorithm)</fr:title><fr:date><fr:year>2024</fr:year><fr:month>9</fr:month><fr:day>17</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="epoche.xml"
addr="epoche"
title="Epoche">Epoche</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>When we insert elements into the tree, if we set the color black, we may
violate global invariants, and if we set it red, we may violate local
invariants. The algorithm that we can solve this problem to maintain the
RI is <fr:em>Okasaki's Algorithm</fr:em>.</fr:p><fr:p>That algorithm set the inserted node color red in insertion to ensure
the global invariant, but it will violate the local invariant, and the
shape of tree are four cases.</fr:p><html:figure
xmlns:html="http://www.w3.org/1999/xhtml">
  <html:img
src="https://github.com/epochess/epochess.github.io/assets/61822407/4e8309b6-addd-446e-ae3a-54ba77b10153" />
</html:figure><fr:p>Okasaki's algorihtm told us of above cases trees can be converted to be
a same tree which have perfect shape.</fr:p><html:figure
xmlns:html="http://www.w3.org/1999/xhtml">
  <html:img
src="https://github.com/epochess/epochess.github.io/assets/61822407/062f3284-8fe4-4b7a-b0ff-d8ddc2140577"
width="200" />
</html:figure><fr:p>We can conclude the ordering of these trees:
<fr:tex
display="block"><![CDATA[{a} < X < {b} < Y < {c} < Z < {d}]]></fr:tex></fr:p><fr:p>Here is the implementation in OCaml:</fr:p><fr:pre><![CDATA[module RBTree = struct
  type color =
    | Red
    | Black

  type 'a tree =
    | Leaf
    | Node of (color * 'a * 'a tree * 'a tree)

  let empty = Leaf

  let rec mem x = function
    | Leaf -> false
    | Node (_, v, l, _) when v > x -> mem x l
    | Node (_, v, _, r) when v < x -> mem x r
    | _ -> true
  ;;

  let balance = function
    | Black, z, Node (Red, y, Node (Red, x, a, b), c), d
    | Black, z, Node (Red, x, a, Node (Red, y, b, c)), d
    | Black, x, a, Node (Red, z, Node (Red, y, b, c), d)
    | Black, x, a, Node (Red, y, b, Node (Red, z, c, d)) ->
      Node (Red, y, Node (Black, x, a, b), Node (Black, z, c, d))
    | a, b, c, d -> Node (a, b, c, d)
  ;;

  let rec insert_aux x = function
    | Leaf -> Node (Red, x, Leaf, Leaf)
    | Node (c, v, l, r) when c > x -> balance (c, v, insert_aux x l, r)
    | Node (c, v, l, r) when c < x -> balance (c, v, l, insert_aux x r)
    | node -> node
  ;;

  let insert x t =
    match insert_aux x t with
    | Leaf -> failwith "error"
    | Node (_, v, l, r) -> Node (Black, v, l, r)
  ;;
end]]></fr:pre></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>290</fr:anchor><fr:addr
type="user">ocmst-0003</fr:addr><fr:route>ocmst-0003.xml</fr:route><fr:title
text="Red-Black Tree">Red-Black Tree</fr:title><fr:date><fr:year>2024</fr:year><fr:month>9</fr:month><fr:day>17</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="epoche.xml"
addr="epoche"
title="Epoche">Epoche</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>Red-Black Tree is a simple balanced tree data structure, which means it
can keep balanced with good shape so that the operations are
logarithmic.</fr:p><fr:p>In RBT, every node have color red or black, the RI make tree balanced.
<fr:ol>1.  <fr:strong>Local Invariant</fr:strong>: there are no two adjacnet red node in any path.</fr:ol>
<fr:ol>2.  <fr:strong>Global Invariant</fr:strong>: the number of black node in every path from root
    to leaf is equal.</fr:ol></fr:p><fr:p>The ADT operations are same as BST : insertion, deletion.</fr:p><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>243</fr:anchor><fr:addr
type="user">ocmst-0004</fr:addr><fr:route>ocmst-0004.xml</fr:route><fr:title
text="Insertion (Okaskaki's algorithm)">Insertion (Okaskaki's algorithm)</fr:title><fr:date><fr:year>2024</fr:year><fr:month>9</fr:month><fr:day>17</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="epoche.xml"
addr="epoche"
title="Epoche">Epoche</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>When we insert elements into the tree, if we set the color black, we may
violate global invariants, and if we set it red, we may violate local
invariants. The algorithm that we can solve this problem to maintain the
RI is <fr:em>Okasaki's Algorithm</fr:em>.</fr:p><fr:p>That algorithm set the inserted node color red in insertion to ensure
the global invariant, but it will violate the local invariant, and the
shape of tree are four cases.</fr:p><html:figure
xmlns:html="http://www.w3.org/1999/xhtml">
  <html:img
src="https://github.com/epochess/epochess.github.io/assets/61822407/4e8309b6-addd-446e-ae3a-54ba77b10153" />
</html:figure><fr:p>Okasaki's algorihtm told us of above cases trees can be converted to be
a same tree which have perfect shape.</fr:p><html:figure
xmlns:html="http://www.w3.org/1999/xhtml">
  <html:img
src="https://github.com/epochess/epochess.github.io/assets/61822407/062f3284-8fe4-4b7a-b0ff-d8ddc2140577"
width="200" />
</html:figure><fr:p>We can conclude the ordering of these trees:
<fr:tex
display="block"><![CDATA[{a} < X < {b} < Y < {c} < Z < {d}]]></fr:tex></fr:p><fr:p>Here is the implementation in OCaml:</fr:p><fr:pre><![CDATA[module RBTree = struct
  type color =
    | Red
    | Black

  type 'a tree =
    | Leaf
    | Node of (color * 'a * 'a tree * 'a tree)

  let empty = Leaf

  let rec mem x = function
    | Leaf -> false
    | Node (_, v, l, _) when v > x -> mem x l
    | Node (_, v, _, r) when v < x -> mem x r
    | _ -> true
  ;;

  let balance = function
    | Black, z, Node (Red, y, Node (Red, x, a, b), c), d
    | Black, z, Node (Red, x, a, Node (Red, y, b, c)), d
    | Black, x, a, Node (Red, z, Node (Red, y, b, c), d)
    | Black, x, a, Node (Red, y, b, Node (Red, z, c, d)) ->
      Node (Red, y, Node (Black, x, a, b), Node (Black, z, c, d))
    | a, b, c, d -> Node (a, b, c, d)
  ;;

  let rec insert_aux x = function
    | Leaf -> Node (Red, x, Leaf, Leaf)
    | Node (c, v, l, r) when c > x -> balance (c, v, insert_aux x l, r)
    | Node (c, v, l, r) when c < x -> balance (c, v, l, insert_aux x r)
    | node -> node
  ;;

  let insert x t =
    match insert_aux x t with
    | Leaf -> failwith "error"
    | Node (_, v, l, r) -> Node (Black, v, l, r)
  ;;
end]]></fr:pre></fr:mainmatter><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>292</fr:anchor><fr:addr
type="user">sponge-0001</fr:addr><fr:route>sponge-0001.xml</fr:route><fr:title
text="Sponge Lab Notes">Sponge Lab Notes</fr:title><fr:date><fr:year>2024</fr:year><fr:month>9</fr:month><fr:day>17</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="epoche.xml"
addr="epoche"
title="Epoche">Epoche</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>255</fr:anchor><fr:addr
type="user">sponge-0002</fr:addr><fr:route>sponge-0002.xml</fr:route><fr:title
text="Sponge Lab 0">Sponge Lab 0</fr:title><fr:date><fr:year>2024</fr:year><fr:month>9</fr:month><fr:day>17</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="epoche.xml"
addr="epoche"
title="Epoche">Epoche</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:strong>Task 1: Webget</fr:strong><fr:p>To implement a byte stream based on the reliable transmission interface (TCP socket protocol) provided by the system. In pratice, it uses the TCP Socket API such as <fr:code>connect</fr:code> to establish a connection with server, <fr:code>write</fr:code> to write some information to the bytestream, <fr:code>read</fr:code> to read some information from the bytestream, and <fr:code>close</fr:code> the socket communication finally.</fr:p><fr:strong>Task 2: In Memory Byte Stream</fr:strong><fr:p>Task 2 is require us to maintain a container that can push some element to the container's back, and take some element from the front. So we can use queue, however, the effciency of the queue is very bad when we peek some bytes of certain length,  because in this function we just view them rather than pop them out. In this way, we can use deuqe to access its internal element, the use <fr:code>[]</fr:code> operator,  which has only <fr:tex
display="inline"><![CDATA[O(1)]]></fr:tex> time complexity.</fr:p><fr:p>In Minnow, <fr:link
type="external"
href="https://github.com/epochess/Sponge/blob/master/libsponge/byte_stream.cc">this implementation</fr:link> can achieve a throughput of 18Gbit/s.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>257</fr:anchor><fr:addr
type="user">sponge-0003</fr:addr><fr:route>sponge-0003.xml</fr:route><fr:title
text="Sponge Lab 1">Sponge Lab 1</fr:title><fr:date><fr:year>2024</fr:year><fr:month>9</fr:month><fr:day>17</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="epoche.xml"
addr="epoche"
title="Epoche">Epoche</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>Implement TCP, to provide the byte-stream abstraction between a pair of computers separated by an unreliable datagram network.</fr:p><fr:p>Reassembler receive a substring that no more than about 1,460 bytes apiece, consisting of a string of bytes, and the index of the first byte of that string within the larger byte stream. Every byte in stream has index. As soon as reassembler find the next byte of the stream,  it will put the byte in the byte stream to keep data in order.</fr:p><fr:p>This lab requires a data structure that allows internal bytes to be arranged in order. Firstly, pushing the byte with index 0, and then pushing byte in which the precursor byte has been pushed. I to do this with vector, just like counting sort, I set a vector whose max length is the number of bytes in bytestream, and when I get a substring, I put each byte into the vector, the index of the bytes in the vector is the index of the byte stream.</fr:p><fr:p>Considering the implementation of the function, when I get a string, I put it into reassembler buffer. If the first byte index of the string is less than or equal to the next expect index (initial to 0), traverse buffer from the next expect index to the end of buffer, find the bytes that continuous starting at next expect byte and push to the bytestream. Otherwise, don't traverse.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>294</fr:anchor><fr:addr
type="user">sponge-0002</fr:addr><fr:route>sponge-0002.xml</fr:route><fr:title
text="Sponge Lab 0">Sponge Lab 0</fr:title><fr:date><fr:year>2024</fr:year><fr:month>9</fr:month><fr:day>17</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="epoche.xml"
addr="epoche"
title="Epoche">Epoche</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:strong>Task 1: Webget</fr:strong><fr:p>To implement a byte stream based on the reliable transmission interface (TCP socket protocol) provided by the system. In pratice, it uses the TCP Socket API such as <fr:code>connect</fr:code> to establish a connection with server, <fr:code>write</fr:code> to write some information to the bytestream, <fr:code>read</fr:code> to read some information from the bytestream, and <fr:code>close</fr:code> the socket communication finally.</fr:p><fr:strong>Task 2: In Memory Byte Stream</fr:strong><fr:p>Task 2 is require us to maintain a container that can push some element to the container's back, and take some element from the front. So we can use queue, however, the effciency of the queue is very bad when we peek some bytes of certain length,  because in this function we just view them rather than pop them out. In this way, we can use deuqe to access its internal element, the use <fr:code>[]</fr:code> operator,  which has only <fr:tex
display="inline"><![CDATA[O(1)]]></fr:tex> time complexity.</fr:p><fr:p>In Minnow, <fr:link
type="external"
href="https://github.com/epochess/Sponge/blob/master/libsponge/byte_stream.cc">this implementation</fr:link> can achieve a throughput of 18Gbit/s.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>296</fr:anchor><fr:addr
type="user">sponge-0003</fr:addr><fr:route>sponge-0003.xml</fr:route><fr:title
text="Sponge Lab 1">Sponge Lab 1</fr:title><fr:date><fr:year>2024</fr:year><fr:month>9</fr:month><fr:day>17</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="epoche.xml"
addr="epoche"
title="Epoche">Epoche</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>Implement TCP, to provide the byte-stream abstraction between a pair of computers separated by an unreliable datagram network.</fr:p><fr:p>Reassembler receive a substring that no more than about 1,460 bytes apiece, consisting of a string of bytes, and the index of the first byte of that string within the larger byte stream. Every byte in stream has index. As soon as reassembler find the next byte of the stream,  it will put the byte in the byte stream to keep data in order.</fr:p><fr:p>This lab requires a data structure that allows internal bytes to be arranged in order. Firstly, pushing the byte with index 0, and then pushing byte in which the precursor byte has been pushed. I to do this with vector, just like counting sort, I set a vector whose max length is the number of bytes in bytestream, and when I get a substring, I put each byte into the vector, the index of the bytes in the vector is the index of the byte stream.</fr:p><fr:p>Considering the implementation of the function, when I get a string, I put it into reassembler buffer. If the first byte index of the string is less than or equal to the next expect index (initial to 0), traverse buffer from the next expect index to the end of buffer, find the bytes that continuous starting at next expect byte and push to the bytestream. Otherwise, don't traverse.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>298</fr:anchor><fr:addr
type="user">ocmst-0002</fr:addr><fr:route>ocmst-0002.xml</fr:route><fr:title
text="Binary Search Tree">Binary Search Tree</fr:title><fr:date><fr:year>2024</fr:year><fr:month>9</fr:month><fr:day>16</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="epoche.xml"
addr="epoche"
title="Epoche">Epoche</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>Binary search tree, also called an ordered or sorted binary tree, is a rooted binary tree data structure with the key of each internal node being greater than all the keys in the respective node's left subtree and less than the ones in its right subtree.

Here is the implemention in OCaml:</fr:p><fr:pre><![CDATA[module BstSet = struct
  type 'a t = Leaf | Node of 'a * 'a t * 'a t

  let empty = Leaf

  let rec size = function
    | Leaf -> 0
    | Node (_, left, right) -> 1 + size left + size right
  ;;

  let rec add x = function
    | Leaf -> Node (x, Leaf, Leaf)
    | Node (v, l, r) when v > x -> Node (v, add x l, r)
    | Node (v, l, r) when v < x -> Node (v, l, add x r)
    | t -> t
  ;;

  let rec mem x = function
    | Leaf -> false
    | Node (v, l, _) when v > x -> mem x l
    | Node (v, _, r) when v < x -> mem x r
    | _ -> true
  ;;

  let rec remove_union lt = function
    | Leaf -> lt
    | Node (v, l, r) -> Node (v, remove_union lt l, r)
  ;;

  let rec remove x = function
    | Leaf -> failwith "tree doesn't contain the element to be removed"
    | Node (v, l, r) when v > x -> Node (v, remove x l, r)
    | Node (v, l, r) when v < x -> Node (v, l, remove x r)
    | Node (_, l, r) -> remove_union l r
  ;;

  let update x x' t = t |> remove x |> add x'
end]]></fr:pre><fr:p>When remove a node in BST, we can union the subtree of removal node to
  the most left Leaf node in the right subtree.</fr:p><html:figure
xmlns:html="http://www.w3.org/1999/xhtml">
  <html:img
src="https://github.com/epochess/epochess.github.io/assets/61822407/6e3209ca-e595-4c52-b93e-c02b98440946" />
</html:figure><fr:p>We can get the key's ordering before delete node <fr:code>del</fr:code>:

  <fr:tex
display="block"><![CDATA[{a} > L > {b} >  del  > Y > {c} > … > R > {d}]]></fr:tex></fr:p><fr:p>After delete the node, we union the subtree <fr:tex
display="inline"><![CDATA[L]]></fr:tex> to the left subnode of
<fr:tex
display="inline"><![CDATA[Y]]></fr:tex>, and the ordering is still unchanged.</fr:p><fr:p>The time complexity of above operations is <fr:tex
display="inline"><![CDATA[O(h)]]></fr:tex>, which <fr:tex
display="inline"><![CDATA[h]]></fr:tex> is height
of the tree. In most case, tree have good shape that all non-leaf node
have 2 children node, so these operations are logarithmic because of
<fr:tex
display="inline"><![CDATA[h = \log (n + 1)]]></fr:tex>. But in the worest case, all nodes of the tree are
right children of the parent node, so that the time complexity is degenerated <fr:tex
display="inline"><![CDATA[O(n)]]></fr:tex>.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="true"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>300</fr:anchor><fr:addr
type="user">epoche-0001</fr:addr><fr:route>index.xml</fr:route><fr:title
text="Epoche’s forest">Epoche’s forest</fr:title><fr:date><fr:year>2024</fr:year><fr:month>9</fr:month><fr:day>16</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="epoche.xml"
addr="epoche"
title="Epoche">Epoche</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>This is my forest, which is <fr:link
type="external"
href="https://www.jonmsterling.com/jms-005P.xml">a way of organizing notes</fr:link>. Here is <fr:link
type="external"
href="https://www.jonmsterling.com/jms-009H.xml">a list of other websites organized as forests</fr:link>. Some of the contents here:</fr:p><fr:ul><fr:li><fr:link
type="local"
href="sponge-0001.xml"
addr="sponge-0001"
title="Sponge Lab Notes">Sponge Lab Notes</fr:link></fr:li>
  <fr:li><fr:link
type="local"
href="ocmst-0001.xml"
addr="ocmst-0001"
title="Functional Red-Black Tree Implementation">Functional Red-Black Tree Implementation</fr:link></fr:li></fr:ul><fr:p>You can also visit my <fr:link
type="local"
href="epoche.xml"
addr="epoche"
title="Epoche">contributor page</fr:link> to see a list of my trees.</fr:p><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>261</fr:anchor><fr:addr
type="user">epoche-0002</fr:addr><fr:route>epoche-0002.xml</fr:route><fr:title
text="Learning progress on evergreen notes in forester">Learning progress on evergreen notes in forester</fr:title><fr:date><fr:year>2024</fr:year><fr:month>9</fr:month><fr:day>16</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="epoche.xml"
addr="epoche"
title="Epoche">Epoche</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p><fr:ul><fr:li><fr:link
type="external"
href="http://www.jonmsterling.com/jms-007N.xml">Overview of the Forester markup language</fr:link></fr:li>
    <fr:li><fr:link
type="external"
href="http://www.jonmsterling.com/jms-007H.xml">Creating new trees</fr:link></fr:li>
    <fr:li><fr:link
type="external"
href="http://www.jonmsterling.com/jms-007K.xml">Creating your personal biographical tree</fr:link></fr:li></fr:ul></fr:p></fr:mainmatter><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>302</fr:anchor><fr:addr
type="user">ocmst-0001</fr:addr><fr:route>ocmst-0001.xml</fr:route><fr:title
text="Functional Red-Black Tree Implementation">Functional Red-Black Tree Implementation</fr:title><fr:date><fr:year>2024</fr:year><fr:month>9</fr:month><fr:day>16</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="epoche.xml"
addr="epoche"
title="Epoche">Epoche</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>249</fr:anchor><fr:addr
type="user">ocmst-0002</fr:addr><fr:route>ocmst-0002.xml</fr:route><fr:title
text="Binary Search Tree">Binary Search Tree</fr:title><fr:date><fr:year>2024</fr:year><fr:month>9</fr:month><fr:day>16</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="epoche.xml"
addr="epoche"
title="Epoche">Epoche</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>Binary search tree, also called an ordered or sorted binary tree, is a rooted binary tree data structure with the key of each internal node being greater than all the keys in the respective node's left subtree and less than the ones in its right subtree.

Here is the implemention in OCaml:</fr:p><fr:pre><![CDATA[module BstSet = struct
  type 'a t = Leaf | Node of 'a * 'a t * 'a t

  let empty = Leaf

  let rec size = function
    | Leaf -> 0
    | Node (_, left, right) -> 1 + size left + size right
  ;;

  let rec add x = function
    | Leaf -> Node (x, Leaf, Leaf)
    | Node (v, l, r) when v > x -> Node (v, add x l, r)
    | Node (v, l, r) when v < x -> Node (v, l, add x r)
    | t -> t
  ;;

  let rec mem x = function
    | Leaf -> false
    | Node (v, l, _) when v > x -> mem x l
    | Node (v, _, r) when v < x -> mem x r
    | _ -> true
  ;;

  let rec remove_union lt = function
    | Leaf -> lt
    | Node (v, l, r) -> Node (v, remove_union lt l, r)
  ;;

  let rec remove x = function
    | Leaf -> failwith "tree doesn't contain the element to be removed"
    | Node (v, l, r) when v > x -> Node (v, remove x l, r)
    | Node (v, l, r) when v < x -> Node (v, l, remove x r)
    | Node (_, l, r) -> remove_union l r
  ;;

  let update x x' t = t |> remove x |> add x'
end]]></fr:pre><fr:p>When remove a node in BST, we can union the subtree of removal node to
  the most left Leaf node in the right subtree.</fr:p><html:figure
xmlns:html="http://www.w3.org/1999/xhtml">
  <html:img
src="https://github.com/epochess/epochess.github.io/assets/61822407/6e3209ca-e595-4c52-b93e-c02b98440946" />
</html:figure><fr:p>We can get the key's ordering before delete node <fr:code>del</fr:code>:

  <fr:tex
display="block"><![CDATA[{a} > L > {b} >  del  > Y > {c} > … > R > {d}]]></fr:tex></fr:p><fr:p>After delete the node, we union the subtree <fr:tex
display="inline"><![CDATA[L]]></fr:tex> to the left subnode of
<fr:tex
display="inline"><![CDATA[Y]]></fr:tex>, and the ordering is still unchanged.</fr:p><fr:p>The time complexity of above operations is <fr:tex
display="inline"><![CDATA[O(h)]]></fr:tex>, which <fr:tex
display="inline"><![CDATA[h]]></fr:tex> is height
of the tree. In most case, tree have good shape that all non-leaf node
have 2 children node, so these operations are logarithmic because of
<fr:tex
display="inline"><![CDATA[h = \log (n + 1)]]></fr:tex>. But in the worest case, all nodes of the tree are
right children of the parent node, so that the time complexity is degenerated <fr:tex
display="inline"><![CDATA[O(n)]]></fr:tex>.</fr:p></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>251</fr:anchor><fr:addr
type="user">ocmst-0003</fr:addr><fr:route>ocmst-0003.xml</fr:route><fr:title
text="Red-Black Tree">Red-Black Tree</fr:title><fr:date><fr:year>2024</fr:year><fr:month>9</fr:month><fr:day>17</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="epoche.xml"
addr="epoche"
title="Epoche">Epoche</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>Red-Black Tree is a simple balanced tree data structure, which means it
can keep balanced with good shape so that the operations are
logarithmic.</fr:p><fr:p>In RBT, every node have color red or black, the RI make tree balanced.
<fr:ol>1.  <fr:strong>Local Invariant</fr:strong>: there are no two adjacnet red node in any path.</fr:ol>
<fr:ol>2.  <fr:strong>Global Invariant</fr:strong>: the number of black node in every path from root
    to leaf is equal.</fr:ol></fr:p><fr:p>The ADT operations are same as BST : insertion, deletion.</fr:p><fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="false"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>243</fr:anchor><fr:addr
type="user">ocmst-0004</fr:addr><fr:route>ocmst-0004.xml</fr:route><fr:title
text="Insertion (Okaskaki's algorithm)">Insertion (Okaskaki's algorithm)</fr:title><fr:date><fr:year>2024</fr:year><fr:month>9</fr:month><fr:day>17</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="epoche.xml"
addr="epoche"
title="Epoche">Epoche</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p>When we insert elements into the tree, if we set the color black, we may
violate global invariants, and if we set it red, we may violate local
invariants. The algorithm that we can solve this problem to maintain the
RI is <fr:em>Okasaki's Algorithm</fr:em>.</fr:p><fr:p>That algorithm set the inserted node color red in insertion to ensure
the global invariant, but it will violate the local invariant, and the
shape of tree are four cases.</fr:p><html:figure
xmlns:html="http://www.w3.org/1999/xhtml">
  <html:img
src="https://github.com/epochess/epochess.github.io/assets/61822407/4e8309b6-addd-446e-ae3a-54ba77b10153" />
</html:figure><fr:p>Okasaki's algorihtm told us of above cases trees can be converted to be
a same tree which have perfect shape.</fr:p><html:figure
xmlns:html="http://www.w3.org/1999/xhtml">
  <html:img
src="https://github.com/epochess/epochess.github.io/assets/61822407/062f3284-8fe4-4b7a-b0ff-d8ddc2140577"
width="200" />
</html:figure><fr:p>We can conclude the ordering of these trees:
<fr:tex
display="block"><![CDATA[{a} < X < {b} < Y < {c} < Z < {d}]]></fr:tex></fr:p><fr:p>Here is the implementation in OCaml:</fr:p><fr:pre><![CDATA[module RBTree = struct
  type color =
    | Red
    | Black

  type 'a tree =
    | Leaf
    | Node of (color * 'a * 'a tree * 'a tree)

  let empty = Leaf

  let rec mem x = function
    | Leaf -> false
    | Node (_, v, l, _) when v > x -> mem x l
    | Node (_, v, _, r) when v < x -> mem x r
    | _ -> true
  ;;

  let balance = function
    | Black, z, Node (Red, y, Node (Red, x, a, b), c), d
    | Black, z, Node (Red, x, a, Node (Red, y, b, c)), d
    | Black, x, a, Node (Red, z, Node (Red, y, b, c), d)
    | Black, x, a, Node (Red, y, b, Node (Red, z, c, d)) ->
      Node (Red, y, Node (Black, x, a, b), Node (Black, z, c, d))
    | a, b, c, d -> Node (a, b, c, d)
  ;;

  let rec insert_aux x = function
    | Leaf -> Node (Red, x, Leaf, Leaf)
    | Node (c, v, l, r) when c > x -> balance (c, v, insert_aux x l, r)
    | Node (c, v, l, r) when c < x -> balance (c, v, l, insert_aux x r)
    | node -> node
  ;;

  let insert x t =
    match insert_aux x t with
    | Leaf -> failwith "error"
    | Node (_, v, l, r) -> Node (Black, v, l, r)
  ;;
end]]></fr:pre></fr:mainmatter><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree><fr:tree
toc="true"
numbered="false"
show-heading="true"
show-metadata="true"
expanded="false"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>304</fr:anchor><fr:addr
type="user">epoche-0002</fr:addr><fr:route>epoche-0002.xml</fr:route><fr:title
text="Learning progress on evergreen notes in forester">Learning progress on evergreen notes in forester</fr:title><fr:date><fr:year>2024</fr:year><fr:month>9</fr:month><fr:day>16</fr:day></fr:date><fr:authors><fr:author><fr:link
type="local"
href="epoche.xml"
addr="epoche"
title="Epoche">Epoche</fr:link></fr:author></fr:authors></fr:frontmatter><fr:mainmatter><fr:p><fr:ul><fr:li><fr:link
type="external"
href="http://www.jonmsterling.com/jms-007N.xml">Overview of the Forester markup language</fr:link></fr:li>
    <fr:li><fr:link
type="external"
href="http://www.jonmsterling.com/jms-007H.xml">Creating new trees</fr:link></fr:li>
    <fr:li><fr:link
type="external"
href="http://www.jonmsterling.com/jms-007K.xml">Creating your personal biographical tree</fr:link></fr:li></fr:ul></fr:p></fr:mainmatter><fr:backmatter /></fr:tree></fr:mainmatter><fr:backmatter /></fr:tree></fr:backmatter></fr:tree>